# This file implements a new Relay-compatible schema for Market.
# This will probably not be implemented for a while, as I'm still figuring out how to
# implement the Relay pagination spec with Prisma.
# This will also make it easier to port to Go/Rust for v2.

scalar Upload

interface Node {
	id: ID!
}

type PageInfo {
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
	startCursor: String
	endCursor: String
}

type User implements Node {
	id: ID!
	name: String!
	email: String!
	phone: String!
	createdAt: String!
	updatedAt: String!

	carts: CartConnection!
	orders: OrderConnection!
	managed: StoreManagerConnection!
	followed: StoreFollowerConnection!
	watchlist: WatchlistProductConnection!
}

type Store implements Node {
	id: ID!
	name: String!
	description: String
	website: String
	twitter: String
	instagram: String
	realizedRevenue: Int!
	unrealizedRevenue: Int!
	payedOut: Int!
	createdAt: String!
	updatedAt: String!

	followedByUser: Boolean!
	image: Image

	orders: OrderConnection!
	products: ProductConnection!
	followers: StoreFollowerConnection!
	carts: CartConnection!
	payouts: PayoutConnection!
}

type Order implements Node {
	id: ID!
	userId: ID!
	storeId: ID!
	status: OrderStatus!
	createdAt: String!
	updatedAt: String!

	total: Int!
	user: User!
	store: Store!

	products: OrderProductConnection!
}

type Product implements Node {
	id: ID!
	name: String!
	description: String!
	unitPrice: Int!
	quantity: Int!
	storeId: ID!
	createdAt: String!
	updatedAt: String!

	inCart: Boolean!
	store: Store!

	orders: OrderConnection!
	carts: CartProductConnection!
	images: ImageConnection!
	watchlists: WatchlistProductConnection!
}

type OrderProduct implements Node {
	id: ID!
	orderId: ID!
	productId: ID!
	unitPrice: Int!
	quantity: Int!

	order: Order!
	product: Product!
}

type WatchlistProduct implements Node {
	id: ID!
	userId: ID!
	productId: ID!

	user: User!
	product: Product!
}

type Payout implements Node {
	id: ID!
	storeId: ID!
	amount: Int!
	createdAt: String!
	updatedAt: String!

	store: Store!
}

type StoreFollower implements Node {
	id: ID!
	followerId: ID!
	storeId: ID!

	follower: User!
	store: Store!
}

type Card implements Node {
	id: ID!
	userId: ID!
	email: String!
	authorizationCode: String!
	cardType: String!
	last4: String!
	expMonth: Int!
	expYear: Int!
	bin: String!
	bank: String!
	signature: String!
	countryCode: String!
	createdAt: String!
	updatedAt: String!

	user: User!
}

type Cart implements Node {
	id: ID!
	userId: ID!
	storeId: ID!
	createdAt: String!
	updatedAt: String!

	total: Int!
	user: User!
	store: Store!
	products: CartProductConnection!
}

type OrderEdge {
	node: Order!
	cursor: String!
}

type OrderConnection {
	edges: [OrderEdge!]!
	pageInfo: PageInfo!
}

input CreateOrderInput {
	userId: ID!
	storeId: ID!
}

input EditOrderInput {
	status: OrderStatus
}

type CreateOrderResponse {
	order: Order
}

type EditOrderResponse {
	order: Order
}

type ProductConnection {
	edges: [ProductEdge!]!
	pageInfo: PageInfo!
}

type ProductEdge {
	cursor: String!
	node: Product
}

type OrderConnection {
	edges: [OrderEdge!]!
	pageInfo: PageInfo!
}

type OrderEdge {
	cursor: String!
	node: Order
}

type UserConnection {
	edges: [UserEdge!]!
	pageInfo: PageInfo!
}

type UserEdge {
	cursor: String!
	node: User
}

type StoreConnection {
	edges: [StoreEdge!]!
	pageInfo: PageInfo!
}

type StoreEdge {
	cursor: String!
	node: Store
}

enum OrderStatus {
	Pending
	Delivered
	Completed
	Cancelled
}

type Query {
	user(id: ID!): User!
	users: UserConnection!
	currentUser: User!

	store(id: ID!): Store!
	stores: StoreConnection!

	order(id: ID!): Order!
	orders: OrderConnection!

	product(id: ID!): Product!
	products: ProductConnection!

	cart(id: ID!): Cart!
	carts: CartConnection!

	card(id: ID!): Card!
	cards: CardConnection!

	node(id: ID!): Node!
}

type Mutation {
	createOrder(input: CreateOrderInput!): CreateOrderResponse!
	editOrder(input: EditOrderInput!): EditOrderResponse!
}
