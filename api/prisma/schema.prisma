generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  orders        Order[]
  managed       StoreManager[]
  followed      StoreFollower[]
  carts         Cart[]
  watchlist     WatchlistProduct[]
  cards         Card[]
  addresses     DeliveryAddress[]
  pushTokens    UserPushToken[]
  ProductReview ProductReview[]
}

model Store {
  id                   String   @id @default(uuid())
  name                 String
  description          String?
  website              String?
  twitter              String?  @db.VarChar(15)
  instagram            String?  @db.VarChar(30)
  unrealizedRevenue    Int      @default(0)
  realizedRevenue      Int      @default(0)
  paidOut              Int      @default(0)
  bankAccountNumber    String?
  bankCode             String?
  bankAccountReference String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  image      Image?
  products   Product[]
  orders     Order[]
  managers   StoreManager[]
  followers  StoreFollower[]
  carts      Cart[]
  payouts    Payout[]
  categories StoreProductCategory[]
}

model Product {
  id          String             @id @default(uuid())
  name        String
  description String
  unitPrice   Int
  quantity    Int                @default(0)
  storeId     String
  status      ProductStatus      @default(Draft)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  images      Image[]
  orders      OrderProduct[]
  carts       CartProduct[]
  watchlists  WatchlistProduct[]
  categories  ProductCategory[]

  store Store @relation(fields: [storeId], references: [id])

  reviews ProductReview[]
  options ProductOption[]
}

model Order {
  id             String         @id @default(uuid())
  userId         String
  storeId        String
  status         OrderStatus    @default(Pending)
  transactionFee Int            @default(0)
  serviceFee     Int            @default(0)
  total          Int
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  products       OrderProduct[]

  user  User  @relation(fields: [userId], references: [id])
  store Store @relation(fields: [storeId], references: [id])
}

model OrderProduct {
  orderId   String
  productId String
  unitPrice Int
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
}

model Cart {
  id        String        @id @default(uuid())
  userId    String
  storeId   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  store     Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  products  CartProduct[]

  @@unique([userId, storeId])
}

model CartProduct {
  cartId    String
  productId String
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
}

model WatchlistProduct {
  userId    String
  productId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Image {
  id        String   @id @default(uuid())
  storeId   String?  @unique
  productId String?
  path      String   @db.VarChar(2083)
  publicId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store     Store?   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model StoreManager {
  storeId   String
  managerId String
  store     Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  manager   User   @relation(fields: [managerId], references: [id], onDelete: Cascade)

  @@unique([storeId, managerId])
}

model StoreFollower {
  storeId    String
  followerId String
  store      Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  follower   User   @relation(fields: [followerId], references: [id], onDelete: Cascade)

  @@unique([storeId, followerId])
}

model Card {
  id                String @id @default(uuid())
  userId            String
  email             String
  authorizationCode String
  cardType          String
  last4             String
  expMonth          String
  expYear           String
  bin               String
  bank              String
  signature         String @unique
  countryCode       String
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payout {
  id        String       @id @default(uuid())
  storeId   String
  amount    Int
  status    PayoutStatus @default(Pending)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  store     Store        @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model ProductCategory {
  productId  String
  categoryId String

  product  Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  category StoreProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, productId])
}

model StoreProductCategory {
  id          String  @id @default(uuid())
  storeId     String
  name        String
  description String?

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  products ProductCategory[]
}

model ProductReview {
  id        String   @id @default(uuid())
  userId    String
  productId String
  body      String?
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model DeliveryAddress {
  id     String  @id @default(uuid())
  userId String
  name   String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPushToken {
  userId String
  token  String
  type   PushTokenType @default(Shopper)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, token])
}

model ProductOption {
  id          String  @id @default(uuid())
  productId   String
  name        String
  description String?

  product Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  values  ProductOptionValue[]

  @@unique([productId, name])
}

model ProductOptionValue {
  id       String @id @default(uuid())
  optionId String
  name     String

  option ProductOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([optionId, name])
}

enum ProductStatus {
  Active
  Draft
}

enum OrderStatus {
  Pending
  Processing
  Cancelled
  Completed
  Delivered
}

enum PayoutStatus {
  Pending
  Success
  Failure
}

enum PushTokenType {
  Shopper
  Merchant
}
